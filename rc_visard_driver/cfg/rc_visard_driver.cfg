#!/usr/bin/env python
PACKAGE = "rc_visard_driver"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

exp_auto_mode_enum = gen.enum([gen.const("Normal", str_t, "Normal", "normal auto-exposure mode"),
                               gen.const("Out1High", str_t, "Out1High", "Adapt exposure only if Out1 is high. Useful for use with projector."),
                               gen.const("AdaptiveOut1", str_t, "AdaptiveOut1", "Optimize exposure for Out1 high, but adapt on all images. Useful for use with projector.")],
                              "Enum to set the auto-exposure mode" )
mode_enum = gen.enum([gen.const("Continuous", str_t, "Continuous", "continuous mode"),
                      gen.const("SingleFrame", str_t, "SingleFrame", "single frame mode"),
                      gen.const("SingleFrameOut1", str_t, "SingleFrameOut1", "single frame mode with controlling out1_mode")],
                     "Enum to set the depth aquisition mode" )
quality_enum = gen.enum([gen.const("FullQuality", str_t, "Full", "Full resulution (requires stereo_plus license)"),
                         gen.const("HighQuality", str_t, "High", "High resulution"),
                         gen.const("MediumQuality", str_t, "Medium", "Medium resulution"),
                         gen.const("LowQuality", str_t, "Low", "Low resulution")],
                        "Enum to set the depth quality" )
out_mode_enum = gen.enum([gen.const("Low", str_t, "Low", "Set output permanently to Low"),
                          gen.const("High", str_t, "High", "Set output permanently to High"),
                          gen.const("ExposureActive", str_t, "ExposureActive", "Set output to high for the exposure time of every image"),
                          gen.const("ExposureAlternateActive", str_t, "ExposureAlternateActive", "Set output to high for the exposure time of every second image")],
                         "Enum to set the out modes")

gen.add("camera_fps",             double_t, 1,        "Frames per second in Hertz", 10, 1, 25)
gen.add("camera_exp_auto",        bool_t,   2,        "Switching between auto and manual exposure", True)
gen.add("camera_exp_auto_mode",   str_t,    2,        "Auto-exposure mode, i.e. Normal, Out1High or AdaptiveOut1", "Normal", edit_method=exp_auto_mode_enum)
gen.add("camera_exp_value",       double_t, 4,        "Manual exposure time in seconds if exp_auto is false", 0.005, 0.000066, 0.018)
gen.add("camera_gain_value",      double_t, 8192,     "Manual gain value in decibel if exp_auto is false", 0, 0, 18)
gen.add("camera_exp_max",         double_t, 8,        "Maximum exposure time in seconds if exp_auto is true", 0.007, 0.000066, 0.018)
gen.add("camera_exp_width",       int_t,    8388608,  "Width of auto exposure region. 0 for whole image.", 0, 0, 1279)
gen.add("camera_exp_height",      int_t,    16777216, "Height of auto exposure region. 0 for whole image.", 0, 0, 959)
gen.add("camera_exp_offset_x",    int_t,    33554432, "First column of auto exposure region", 0, 0, 1279)
gen.add("camera_exp_offset_y",    int_t,    67108864, "First row of auto exposure region", 0, 0, 959)
gen.add("camera_wb_auto",         bool_t,   16384,    "Switching white balance on and off (only for color camera)", True)
gen.add("camera_wb_ratio_red",    double_t, 32768,    "Red to green balance ratio if wb_auto is false (only for color camera)", 1.2, 0.125, 8)
gen.add("camera_wb_ratio_blue",   double_t, 65536,    "Blue to green balance ratio if wb_auto is false (only for color camera)", 2.4, 0.125, 8)
gen.add("depth_acquisition_mode", str_t,    1048576,  "SingleFrame, SingleFrameOut1 or Continuous", "Continuous", edit_method=mode_enum)
gen.add("depth_quality",          str_t,    16,       "Full, High, Medium, or Low. Full requires 'stereo_plus' license.", "High", edit_method=quality_enum)
gen.add("depth_double_shot",      bool_t,   32,       "Combination of disparity images from two subsequent stereo image pairs", False)
gen.add("depth_static_scene",     bool_t,   2097152,  "Accumulation of images in static scenes to reduce noise", False)
gen.add("depth_mindepth",         double_t, 1024,     "Minimum depth in meters", 0.1, 0.1, 100)
gen.add("depth_maxdepth",         double_t, 2048,     "Maximum depth in meters", 100, 0.1, 100)
gen.add("depth_smooth",           bool_t,   4194304,  "Smoothing of disparity image (requires 'stereo_plus' license)", False)
gen.add("depth_fill",             int_t,    256,      "Filling level in pixels", 3, 0, 4)
gen.add("depth_seg",              int_t,    64,       "Minimum size of valid disparity segments in pixels", 200, 0, 4000)
gen.add("depth_minconf",          double_t, 512,      "Minimum confidence", 0.5, 0.5, 1)
gen.add("depth_maxdeptherr",      double_t, 4096,     "Maximum depth error in meters", 100, 0.01, 100)
gen.add("ptp_enabled",            bool_t,   131072,   "Enable PTP slave (PrecisionTimeProtocol, IEEE1588)", False)
gen.add("out1_mode",              str_t,    262144,   "Low, High, ExposureActive, ExposureAlternateActive", "ExposureActive", edit_method=out_mode_enum)
gen.add("out2_mode",              str_t,    524288,   "Low, High, ExposureActive, ExposureAlternateActive", "Low", edit_method=out_mode_enum)

exit(gen.generate(PACKAGE, "rc_visard_driver", "rc_visard_driver"))
