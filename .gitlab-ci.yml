before_script:
  - export DEBIAN_FRONTEND=noninteractive
  - apt-get update -yq && apt-get install -y curl lsb-release
  - export DISTRO_CODENAME=`lsb_release -cs` && echo Using distro $DISTRO_CODENAME
  - echo "deb http://apt.roboception.de/stable $DISTRO_CODENAME main" > /etc/apt/sources.list.d/roboception-stable.list
  - if [ "$TESTING_DEBS" = "true" ]; then echo "deb http://apt.roboception.de/testing $DISTRO_CODENAME main" > /etc/apt/sources.list.d/roboception-testing.list ; fi
  - curl http://apt.roboception.de/archive.key | apt-key add -
  - apt-get update -yq && apt-get install -y lintian rc-genicam-api rc-dynamics-api ros-$ROS_DISTRO-rc-common-msgs ros-$ROS_DISTRO-rcdiscover
  - rosdep install --from-paths . --ignore-src -r -y --skip-keys="rc_genicam_api rc_dynamics_api rcdiscover"

variables:
  GET_SOURCES_ATTEMPTS: 3
  GIT_DEPTH: 0
  GIT_SUBMODULE_STRATEGY: recursive

stages:
  - test
  - package
  - package2
  - image

##################
# Anchor templates
##################
.amd64_xenial_t: &amd64_xenial_job
  image: ros:kinetic-perception
  tags:
    - amd64
    - docker

.armhf_xenial_t: &armhf_xenial_job
  image: registry.roboception.de/tools/docker_images:armhf-kinetic-perception
  tags:
    - armhf
    - docker

.amd64_bionic_t: &amd64_bionic_job
  image: ros:melodic-perception
  tags:
    - amd64
    - docker

#############
# Templates
#############
.test:
  stage: test
  variables:
    PACKAGE: "rc_visard_driver"
  script:
    - if [ -n $EXTRA_DEBS ]; then apt-get install -y $EXTRA_DEBS; fi
    - mkdir build && cd build
    - cmake ../${PACKAGE}
    - make -j 4
    - CTEST_OUTPUT_ON_FAILURE=1 make test

# run test script with latest debs from testing installed
.test_latest:
  extends: .test
  variables:
    TESTING_DEBS: "true"

# run test script with released debs from stable installed (allowed to fail)
.test_stable:
  extends: .test
  allow_failure: true
  except:
    - /^v[0-9]+\.[0-9]+\.[0-9]+/

# run test script with released debs from stable (only for releases, mustn't fail)
.test_release:
  extends: .test
  only:
    - /^v[0-9]+\.[0-9]+\.[0-9]+/
  except:
    - branches

# Debian packaging
.package:
  stage: package
  variables:
    PACKAGE: "rc_visard_driver"
  script:
    - if [ -n $EXTRA_DEBS ]; then apt-get install -y $EXTRA_DEBS; fi
    - mkdir build && cd build
    - cmake -DCATKIN_BUILD_BINARY_PACKAGE="1" -DCMAKE_INSTALL_PREFIX="/opt/ros/$ROS_DISTRO" -DCMAKE_PREFIX_PATH="/opt/ros/$ROS_DISTRO" -DCMAKE_BUILD_TYPE=Release ../${PACKAGE}
    - make -j 4
    - make package
    - if [ -z "$APT_REPO" ]; then export APT_REPO=testing; fi
    - upload_deb.sh $DISTRO_CODENAME-$APT_REPO *.deb

.package_testing:
  extends: .package
  only:
    - master
  variables:
    TESTING_DEBS: "true"
    APT_REPO: "testing"

.package_stable:
  extends: .package
  only:
    - /^v[0-9]+\.[0-9]+\.[0-9]+/
  except:
    - branches
  variables:
    APT_REPO: "stable"

# Docker image
.docker_build:
  image: docker:latest
  stage: image
  variables:
    PACKAGE: "rc_visard_driver"
    ROS_DISTRO: "melodic"
    RC_REPO: testing
    DOCKERFILE_DIR: "."
  before_script:
    - docker info
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - if [ -z "$IMAGE" ]; then export IMAGE=$CI_REGISTRY_IMAGE/$PACKAGE/$ROS_DISTRO ; fi
    - if [ -n "$CI_COMMIT_TAG" ]; then export IMAGE_TAG=$CI_COMMIT_TAG ; else export IMAGE_TAG=$CI_COMMIT_REF_SLUG ; fi
    - if [ "$CI_COMMIT_REF_NAME" = "master" ]; then export IMAGE_TAG=testing ; fi
    - if [ -z "$DOCKER_BUILD_FLAGS" ]; then export DOCKER_BUILD_FLAGS="--pull --no-cache --build-arg ROS_DISTRO=$ROS_DISTRO --build-arg RC_REPO=$RC_REPO"; fi
    - if [ -n "$DOCKERFILE" ]; then export DOCKER_BUILD_FLAGS="$DOCKER_BUILD_FLAGS -f $DOCKERFILE"; fi
  script:
    - echo "building docker image $IMAGE:$IMAGE_TAG with flags $DOCKER_BUILD_FLAGS in $DOCKERFILE_DIR"
    - docker build $DOCKER_BUILD_FLAGS -t $IMAGE:$IMAGE_TAG $DOCKERFILE_DIR
    - docker push $IMAGE:$IMAGE_TAG
    - if [ -n "$CI_COMMIT_TAG" ]; then docker tag $IMAGE:$IMAGE_TAG $IMAGE:latest; docker push $IMAGE:latest; docker rmi $IMAGE:latest; fi
    - docker rmi $IMAGE:$IMAGE_TAG || true
  tags:
    - docker-build

.docker_build_stable:
  extends: .docker_build
  variables:
    RC_REPO: stable
  only:
    - /^v[0-9]+\.[0-9]+\.[0-9]+/
  except:
    - branches
    - schedules

##############
#### Jobs ####
##############

################
# Testing builds
################

# Test against latest (on every commit)
#######################################
test:rc_visard_driver:xenial:amd64:
  <<: *amd64_xenial_job
  extends: .test_latest

test:rc_visard_driver:bionic:amd64:
  <<: *amd64_bionic_job
  extends: .test_latest

test:rc_hand_eye_calibration_client:xenial:amd64:
  <<: *amd64_xenial_job
  extends: .test_latest
  variables:
    PACKAGE: "rc_hand_eye_calibration_client"

test:rc_hand_eye_calibration_client:bionic:amd64:
  <<: *amd64_bionic_job
  extends: .test_latest
  variables:
    PACKAGE: "rc_hand_eye_calibration_client"

test:rc_pick_client:xenial:amd64:
  <<: *amd64_xenial_job
  extends: .test_latest
  variables:
    PACKAGE: "rc_pick_client"

test:rc_pick_client:bionic:amd64:
  <<: *amd64_bionic_job
  extends: .test_latest
  variables:
    PACKAGE: "rc_pick_client"

test:rc_tagdetect_client:xenial:amd64:
  <<: *amd64_xenial_job
  extends: .test_latest
  variables:
    PACKAGE: "rc_tagdetect_client"

test:rc_tagdetect_client:bionic:amd64:
  <<: *amd64_bionic_job
  extends: .test_latest
  variables:
    PACKAGE: "rc_tagdetect_client"

test:rc_silhouettematch_client:xenial:amd64:
  <<: *amd64_xenial_job
  extends: .test_latest
  variables:
    PACKAGE: "rc_silhouettematch_client"

test:rc_silhouettematch_client:bionic:amd64:
  <<: *amd64_bionic_job
  extends: .test_latest
  variables:
    PACKAGE: "rc_silhouettematch_client"

test:rc_visard_description:xenial:amd64:
  <<: *amd64_xenial_job
  extends: .test_latest
  variables:
    PACKAGE: "rc_visard_description"

test:rc_visard_description:bionic:amd64:
  <<: *amd64_bionic_job
  extends: .test_latest
  variables:
    PACKAGE: "rc_visard_description"

test:rc_roi_manager_gui:xenial:amd64:
  <<: *amd64_xenial_job
  extends: .test_latest
  variables:
    PACKAGE: "rc_roi_manager_gui"
    EXTRA_DEBS: "ros-kinetic-rc-pick-client"

test:rc_roi_manager_gui:bionic:amd64:
  <<: *amd64_bionic_job
  extends: .test_latest
  variables:
    PACKAGE: "rc_roi_manager_gui"
    EXTRA_DEBS: "ros-melodic-rc-pick-client"

# Test against stable (is allowed to fail)
##########################################
test_stable:rc_visard_driver:xenial:amd64:
  <<: *amd64_xenial_job
  extends: .test_stable

test_stable:rc_visard_driver:bionic:amd64:
  <<: *amd64_bionic_job
  extends: .test_stable

# Deploy testing (only on master)
#################################
package_testing:rc_visard_driver:xenial:amd64:
  <<: *amd64_xenial_job
  extends: .package_testing

package_testing:rc_visard_driver:bionic:amd64:
  <<: *amd64_bionic_job
  extends: .package_testing

package_testing:rc_hand_eye_calibration_client:xenial:amd64:
  <<: *amd64_xenial_job
  extends: .package_testing
  variables:
    PACKAGE: "rc_hand_eye_calibration_client"

package_testing:rc_hand_eye_calibration_client:bionic:amd64:
  <<: *amd64_bionic_job
  extends: .package_testing
  variables:
    PACKAGE: "rc_hand_eye_calibration_client"

package_testing:rc_pick_client:xenial:amd64:
  <<: *amd64_xenial_job
  extends: .package_testing
  variables:
    PACKAGE: "rc_pick_client"

package_testing:rc_pick_client:bionic:amd64:
  <<: *amd64_bionic_job
  extends: .package_testing
  variables:
    PACKAGE: "rc_pick_client"

package_testing:rc_tagdetect_client:xenial:amd64:
  <<: *amd64_xenial_job
  extends: .package_testing
  variables:
    PACKAGE: "rc_tagdetect_client"

package_testing:rc_tagdetect_client:bionic:amd64:
  <<: *amd64_bionic_job
  extends: .package_testing
  variables:
    PACKAGE: "rc_tagdetect_client"

package_testing:rc_silhouettematch_client:xenial:amd64:
  <<: *amd64_xenial_job
  extends: .package_testing
  variables:
    PACKAGE: "rc_silhouettematch_client"

package_testing:rc_silhouettematch_client:bionic:amd64:
  <<: *amd64_bionic_job
  extends: .package_testing
  variables:
    PACKAGE: "rc_silhouettematch_client"

package_testing:rc_visard_description:xenial:amd64:
  <<: *amd64_xenial_job
  extends: .package_testing
  variables:
    PACKAGE: "rc_visard_description"

package_testing:rc_visard_description:bionic:amd64:
  <<: *amd64_bionic_job
  extends: .package_testing
  variables:
    PACKAGE: "rc_visard_description"

package2_testing:rc_roi_manager_gui:xenial:amd64:
  <<: *amd64_xenial_job
  extends: .package_testing
  stage: package2
  variables:
    PACKAGE: "rc_roi_manager_gui"
    EXTRA_DEBS: "ros-kinetic-rc-pick-client"

package2_testing:rc_roi_manager_gui:bionic:amd64:
  <<: *amd64_bionic_job
  extends: .package_testing
  stage: package2
  variables:
    PACKAGE: "rc_roi_manager_gui"
    EXTRA_DEBS: "ros-melodic-rc-pick-client"

#package2_testing:rc_visard:xenial:amd64:
#  <<: *amd64_xenial_job
#  extends: .package_testing
#  stage: package2
#  variables:
#    PACKAGE: "rc_visard"
#
#package2_testing:rc_visard:bionic:amd64:
#  <<: *amd64_bionic_job
#  extends: .package_testing
#  stage: package2
#  variables:
#    PACKAGE: "rc_visard"

################
# Stable builds
################

# Test against stable if it is a release
########################################
test_release:rc_visard_driver:xenial:amd64:
  <<: *amd64_xenial_job
  extends: .test_release

test_release:rc_visard_driver:bionic:amd64:
  <<: *amd64_bionic_job
  extends: .test_release

# Deploy stable (only for releases, version tags)
#################################################
package_stable:rc_visard_driver:xenial:amd64:
  <<: *amd64_xenial_job
  extends: .package_stable

package_stable:rc_visard_driver:bionic:amd64:
  <<: *amd64_bionic_job
  extends: .package_stable

package_stable:rc_hand_eye_calibration_client:xenial:amd64:
  <<: *amd64_xenial_job
  extends: .package_stable
  variables:
    PACKAGE: "rc_hand_eye_calibration_client"

package_stable:rc_hand_eye_calibration_client:bionic:amd64:
  <<: *amd64_bionic_job
  extends: .package_stable
  variables:
    PACKAGE: "rc_hand_eye_calibration_client"

package_stable:rc_pick_client:xenial:amd64:
  <<: *amd64_xenial_job
  extends: .package_stable
  variables:
    PACKAGE: "rc_pick_client"

package_stable:rc_pick_client:bionic:amd64:
  <<: *amd64_bionic_job
  extends: .package_stable
  variables:
    PACKAGE: "rc_pick_client"

package_stable:rc_tagdetect_client:xenial:amd64:
  <<: *amd64_xenial_job
  extends: .package_stable
  variables:
    PACKAGE: "rc_tagdetect_client"

package_stable:rc_tagdetect_client:bionic:amd64:
  <<: *amd64_bionic_job
  extends: .package_stable
  variables:
    PACKAGE: "rc_tagdetect_client"

package_stable:rc_silhouettematch_client:xenial:amd64:
  <<: *amd64_xenial_job
  extends: .package_stable
  variables:
    PACKAGE: "rc_silhouettematch_client"

package_stable:rc_silhouettematch_client:bionic:amd64:
  <<: *amd64_bionic_job
  extends: .package_stable
  variables:
    PACKAGE: "rc_silhouettematch_client"

package_stable:rc_visard_description:xenial:amd64:
  <<: *amd64_xenial_job
  extends: .package_stable
  variables:
    PACKAGE: "rc_visard_description"

package_stable:rc_visard_description:bionic:amd64:
  <<: *amd64_bionic_job
  extends: .package_stable
  variables:
    PACKAGE: "rc_visard_description"

package2_stable:rc_roi_manager_gui:xenial:amd64:
  <<: *amd64_xenial_job
  extends: .package_stable
  stage: package2
  variables:
    PACKAGE: "rc_roi_manager_gui"
    EXTRA_DEBS: "ros-kinetic-rc-pick-client"

package2_stable:rc_roi_manager_gui:bionic:amd64:
  <<: *amd64_bionic_job
  extends: .package_stable
  stage: package2
  variables:
    PACKAGE: "rc_roi_manager_gui"
    EXTRA_DEBS: "ros-melodic-rc-pick-client"

#package2_stable:rc_visard:xenial:amd64:
#  <<: *amd64_xenial_job
#  extends: .package_stable
#  stage: package2
#  variables:
#    PACKAGE: "rc_visard"
#
#package2_stable:rc_visard:bionic:amd64:
#  <<: *amd64_bionic_job
#  extends: .package_stable
#  stage: package2
#  variables:
#    PACKAGE: "rc_visard"

###############
# Docker images
###############
image:rc_visard_driver:melodic:wip:
  extends: .docker_build
  except:
    - master
    - /^v[0-9]+\.[0-9]+\.[0-9]+/
  variables:
    PACKAGE: "rc_visard_driver"
    ROS_DISTRO: "melodic"
    DOCKERFILE_DIR: "rc_visard_driver"

image:rc_visard_driver:melodic:testing:
  extends: .docker_build
  only:
    - master
  variables:
    PACKAGE: "rc_visard_driver"
    ROS_DISTRO: "melodic"
    DOCKERFILE_DIR: "rc_visard_driver"

image:rc_hand_eye_calibration_client:melodic:testing:
  extends: .docker_build
  only:
    - master
  variables:
    PACKAGE: "rc_hand_eye_calibration_client"
    ROS_DISTRO: "melodic"
    DOCKERFILE_DIR: "rc_hand_eye_calibration_client"

image:rc_visard_driver:melodic:stable:
  extends: .docker_build_stable
  variables:
    PACKAGE: "rc_visard_driver"
    ROS_DISTRO: "melodic"
    DOCKERFILE_DIR: "rc_visard_driver"

image:rc_hand_eye_calibration_client:melodic:stable:
  extends: .docker_build_stable
  variables:
    PACKAGE: "rc_hand_eye_calibration_client"
    ROS_DISTRO: "melodic"
    DOCKERFILE_DIR: "rc_hand_eye_calibration_client"
